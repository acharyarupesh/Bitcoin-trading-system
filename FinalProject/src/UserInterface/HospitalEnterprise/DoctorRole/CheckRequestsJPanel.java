/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.HospitalEnterprise.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Actor.Doctor;
import Business.Organization.CustodianOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustodianWorkRequest;
import Business.WorkQueue.LabWorkRequest;
import Business.WorkQueue.MinerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author achar
 */
public class CheckRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckRequestsJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
    private EcoSystem business;
    private double payment = 0;
    private Doctor doctor;

    CheckRequestsJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.business = business;
        populateTable();
        moneyLabel.setVisible(false);
        doctor = (Doctor) account.getEmployee();

        walletlabel.setText(String.valueOf(doctor.getNoOfBitcoins()));

    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : account.getWorkqueue().getWorkRequestList()) {
            if ("class Business.WorkQueue.LabWorkRequest".equals(String.valueOf(request.getClass()))) {
                Object[] row = new Object[6];
                row[0] = ((LabWorkRequest) request).getPatientName();
                row[1] = ((LabWorkRequest) request).getType();
                row[2] = request.getMessage();
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[4] = request;
                if (!request.getStatus().equals("Sent") && !request.getStatus().equals("Pending")) {
                    if (request.isPayment()) {
                        row[5] = ((LabWorkRequest) request).getResult();
                    } else {
                        row[5] = "Please pay to see result";
                    }
                } else {
                    row[5] = "Awating result";
                }
                dtm.addRow(row);
            }
            workRequestJTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        headingJLabel = new javax.swing.JLabel();
        createRequestLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        payButton = new javax.swing.JButton();
        payButton1 = new javax.swing.JButton();
        moneyLabel = new javax.swing.JLabel();
        moneyLabel1 = new javax.swing.JLabel();
        walletlabel = new javax.swing.JLabel();
        addBitcoinsButton = new javax.swing.JButton();
        bitcoinsTextField = new javax.swing.JTextField();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient", "Type", "Message", "Receiver", "Status", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        headingJLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headingJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingJLabel.setText("Requested Tests");

        createRequestLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        createRequestLabel.setForeground(new java.awt.Color(255, 0, 51));
        createRequestLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createRequestLabel.setText("Create a new request");
        createRequestLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createRequestLabelMouseClicked(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        payButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        payButton.setText("Pay");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        payButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        payButton1.setText("Check amount");
        payButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButton1ActionPerformed(evt);
            }
        });

        moneyLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        moneyLabel.setText("jLabel1");

        moneyLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        moneyLabel1.setText("Wallet Balance: ");

        walletlabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        walletlabel.setText("<value>");

        addBitcoinsButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        addBitcoinsButton.setText("Add Bitcoins to Wallet");
        addBitcoinsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBitcoinsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headingJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(payButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moneyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(moneyLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(walletlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bitcoinsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addBitcoinsButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(headingJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moneyLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(walletlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moneyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBitcoinsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bitcoinsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createRequestLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createRequestLabelMouseClicked
        // TODO add your handling code here:
        RequestLabTestJPanel RLTjpanel = new RequestLabTestJPanel(userProcessContainer, account, enterprise);
        userProcessContainer.add("RLTjpanel", RLTjpanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createRequestLabelMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // TODO add your handling code here:
        if (payment != 0) {
            
            if (doctor.getNoOfBitcoins() >= Double.parseDouble(moneyLabel.getText())) {
                int row = workRequestJTable.getSelectedRow();
                if (row < 0) {
                    JOptionPane.showMessageDialog(null, "Please select a row");
                    return;
                }
                payment=0;
                String status = String.valueOf(workRequestJTable.getValueAt(row, 4));
                String result = String.valueOf(workRequestJTable.getValueAt(row, 5));
                if (status.equals("Completed") && result.equals("Please pay to see result")) {
                    WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 4);
                    for (Network network : business.getNetworkList()) {
                        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                            if ("Exchange".equals(String.valueOf(enterprise.getEnterpriseType()))) {
                                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    if (o.getName().equals("Miner Organization")) {
                                        MinerWorkRequest minerRequest = new MinerWorkRequest();
                                        minerRequest.setRequestedDate(request.getRequestedDate());
                                        minerRequest.setSender(account);
                                        minerRequest.setReceiver(request.getReceiver());
                                        minerRequest.setStatus(request.getStatus());
                                        minerRequest.setBitcoinRewards(1);
                                        minerRequest.setBitcoinsRequested(payment);
                                        minerRequest.setRequestedDate(new Date());
                                        o.getWorkqueue().getWorkRequestList().add(minerRequest);
                                        account.getWorkqueue().getWorkRequestList().add(minerRequest);
                                    }
                                }
                            }
                        }
                    }
                    request.setPayment(true);
                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(null, "Not Allowed!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient balance");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please check the price first");
        }
    }//GEN-LAST:event_payButtonActionPerformed

    private void payButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButton1ActionPerformed
        // TODO add your handling code here:
        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        String type = (String) workRequestJTable.getValueAt(row, 1);
        if (type.equals("Blood Test")) {
            payment = 2.3;
        } else if (type.equals("X-Ray")) {
            payment = 3.4;
        } else if (type.equals("Urine Test")) {
            payment = 2.1;
        } else if (type.equals("MRI")) {
            payment = 4.3;
        } else if (type.equals("ECG")) {
            payment = 6.3;
        }

        moneyLabel.setText(String.valueOf(payment));
        moneyLabel.setVisible(true);

    }//GEN-LAST:event_payButton1ActionPerformed

    private void addBitcoinsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBitcoinsButtonActionPerformed
        // TODO add your handling code here:
        if (!bitcoinsTextField.getText().trim().isEmpty()) {
            double bitcoins = Double.parseDouble(bitcoinsTextField.getText().trim());
            CustodianWorkRequest request = new CustodianWorkRequest();
            request.setMessage("Adding money to wallet");
            request.setSender(account);
            request.setRequestType("Buy");
            request.setBitcoinsRequested(bitcoins);
            request.setStatus("Pending");
            request.setRequestedDate(new Date());

            Organization org = null;
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof CustodianOrganization) {
                            org = organization;
                            break;
                        }
                    }
                }
            }
            if (org != null) {
                org.getWorkqueue().getWorkRequestList().add(request);
                account.getWorkqueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "Request has been successfully submitted");

        } else {
            JOptionPane.showMessageDialog(null, "Please enter amount");
        }
    }//GEN-LAST:event_addBitcoinsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBitcoinsButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bitcoinsTextField;
    private javax.swing.JLabel createRequestLabel;
    private javax.swing.JLabel headingJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel moneyLabel;
    private javax.swing.JLabel moneyLabel1;
    private javax.swing.JButton payButton;
    private javax.swing.JButton payButton1;
    private javax.swing.JLabel walletlabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
