/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ExchangeEnterprise.CustodianRole;

import Business.Enterprise.Enterprise;
import Business.Organization.CustodianOrganization;
import Business.Organization.MinerOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustodianWorkRequest;
import Business.WorkQueue.MinerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Niyati Maheshwari
 */
public class CustodianWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustodianWorkAreaPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private CustodianOrganization custodianOrganization;
    private Enterprise enterprise;

    public CustodianWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, CustodianOrganization custodianOrganization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.custodianOrganization = custodianOrganization;
        this.enterprise = enterprise;
        populateTable();
        sellerJTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
        buyerJTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) requestTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : custodianOrganization.getWorkqueue().getWorkRequestList()) {
            Object[] row = new Object[7];
            row[0] = wr.getSender();
            row[1] = wr.getRequestedDate();
            row[2] = ((CustodianWorkRequest) wr).getRequestType();
            row[3] = wr.getMessage();
            row[4] = wr;
            row[5] = " ";
            row[6] = wr.getBitcoinsRequested();

            dtm.addRow(row);
        }
        requestTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
    }

    public void populateBuyTable() {
        DefaultTableModel dtm = (DefaultTableModel) sellerJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : custodianOrganization.getWorkqueue().getWorkRequestList()) {
            Object[] row = new Object[3];
            if (((CustodianWorkRequest) wr).getRequestType().equals("Sell")) {
                row[0] = wr.getSender();
                row[1] = wr.getBitcoinsRequested();
                row[2] = wr;

                dtm.addRow(row);
            }
        }

    }

    public void populateSellTable() {
        DefaultTableModel dtm = (DefaultTableModel) buyerJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : custodianOrganization.getWorkqueue().getWorkRequestList()) {
            Object[] row = new Object[3];
            if (((CustodianWorkRequest) wr).getRequestType().equals("Buy")) {
                row[0] = wr.getSender();
                row[1] = wr.getBitcoinsRequested();
                row[2] = wr;

                dtm.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        buyJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sellerJTable = new javax.swing.JTable();
        sellJPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        buyerJTable = new javax.swing.JTable();
        processButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        headingJLAbel = new javax.swing.JLabel();
        compReqBtn = new javax.swing.JButton();

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Request Date", "Buy/Sell", "Message", "Request Status", "Resolve Date", "Bitcoins"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestTable);
        if (requestTable.getColumnModel().getColumnCount() > 0) {
            requestTable.getColumnModel().getColumn(0).setMinWidth(0);
            requestTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            requestTable.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        sellerJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seller", "Bitcoins", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sellerJTable);
        if (sellerJTable.getColumnModel().getColumnCount() > 0) {
            sellerJTable.getColumnModel().getColumn(2).setMinWidth(0);
            sellerJTable.getColumnModel().getColumn(2).setPreferredWidth(0);
            sellerJTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        javax.swing.GroupLayout buyJPanelLayout = new javax.swing.GroupLayout(buyJPanel);
        buyJPanel.setLayout(buyJPanelLayout);
        buyJPanelLayout.setHorizontalGroup(
            buyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addContainerGap())
        );
        buyJPanelLayout.setVerticalGroup(
            buyJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buy", buyJPanel);

        buyerJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Buyer", "Bitcoins", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(buyerJTable);
        if (buyerJTable.getColumnModel().getColumnCount() > 0) {
            buyerJTable.getColumnModel().getColumn(2).setMinWidth(0);
            buyerJTable.getColumnModel().getColumn(2).setPreferredWidth(0);
            buyerJTable.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        javax.swing.GroupLayout sellJPanelLayout = new javax.swing.GroupLayout(sellJPanel);
        sellJPanel.setLayout(sellJPanelLayout);
        sellJPanelLayout.setHorizontalGroup(
            sellJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addContainerGap())
        );
        sellJPanelLayout.setVerticalGroup(
            sellJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sell", sellJPanel);

        processButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        headingJLAbel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        headingJLAbel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingJLAbel.setText("Custodian Work Area");

        compReqBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        compReqBtn.setText("Check Completed Requests");
        compReqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compReqBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(headingJLAbel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(compReqBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingJLAbel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compReqBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        // TODO add your handling code here:
        int row = requestTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        } else {
            //UserAccount minerWorkRequest = (UserAccount) requestTable.getValueAt(row, 0);
            String cwr = String.valueOf(requestTable.getValueAt(row, 2));
            if (cwr.equals("Buy")) {
                populateBuyTable();
            } else {
                populateSellTable();

            }
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        MinerWorkRequest minerWorkRequest = new MinerWorkRequest();
        int row = requestTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        } else {
            WorkRequest wr = (WorkRequest) requestTable.getValueAt(row, 4);
            if (((CustodianWorkRequest) wr).getRequestType().equals("Buy")) {
                int selectedRow = sellerJTable.getSelectedRow();

                if (selectedRow < 0) {
                    JOptionPane.showMessageDialog(null, "Please select a row buyer table");
                } else {
                    WorkRequest newRequest = (WorkRequest) sellerJTable.getValueAt(selectedRow, 2);
                    if (wr.getBitcoinsRequested() == newRequest.getBitcoinsRequested()) {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(wr.getBitcoinsRequested());
                        minerWorkRequest.setStatus(wr.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());

                        UserAccount ua = (UserAccount) newRequest.getSender();
                        for (WorkRequest stateReq : ua.getWorkqueue().getWorkRequestList()) {
                            if (newRequest.getRequestedDate().equals(stateReq.getRequestedDate())) {
                                stateReq.setStatus("Processed");
                                newRequest.setStatus("Processed");
                                wr.setStatus("Processed");
                            }
                        }
                        userAccount.getWorkqueue().getWorkRequestList().add(wr);
                        userAccount.getWorkqueue().getWorkRequestList().add(newRequest);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(wr);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(newRequest);
                        populateTable();
                        populateBuyTable();

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }
                    } else if (wr.getBitcoinsRequested() < newRequest.getBitcoinsRequested()) {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(wr.getBitcoinsRequested());
                        minerWorkRequest.setStatus(wr.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());
                        double requested = newRequest.getBitcoinsRequested();
                        newRequest.setBitcoinsRequested(newRequest.getBitcoinsRequested() - wr.getBitcoinsRequested());
                        wr.setStatus("Processed");
                        newRequest.setStatus(wr.getBitcoinsRequested() + " out of " + requested + " Bitcoins Processed");
                        userAccount.getWorkqueue().getWorkRequestList().add(wr);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(wr);
                        WorkRequest customReq = new WorkRequest();
                        customReq.setSender(newRequest.getSender());
                        customReq.setStatus("Processed");
                        customReq.setRequestedDate(newRequest.getRequestedDate());
                        customReq.setResovledDate(newRequest.getResovledDate());
                        customReq.setMessage(newRequest.getMessage());
                        customReq.setBitcoinsRequested(wr.getBitcoinsRequested());
                        userAccount.getWorkqueue().getWorkRequestList().add(customReq);
                        populateTable();
                        populateBuyTable();

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }
                    } else {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(newRequest.getBitcoinsRequested());
                        minerWorkRequest.setStatus(newRequest.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());
                        double requested = wr.getBitcoinsRequested();
                        wr.setBitcoinsRequested(wr.getBitcoinsRequested() - newRequest.getBitcoinsRequested());
                        newRequest.setStatus("Processed");
                        wr.setStatus(newRequest.getBitcoinsRequested() + " out of " + requested + " Bitcoins Processed");
                        userAccount.getWorkqueue().getWorkRequestList().add(newRequest);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(newRequest);
                        WorkRequest customReq = new WorkRequest();
                        customReq.setSender(wr.getSender());
                        customReq.setStatus("Processed");
                        customReq.setRequestedDate(wr.getRequestedDate());
                        customReq.setResovledDate(wr.getResovledDate());
                        customReq.setMessage(wr.getMessage());
                        customReq.setBitcoinsRequested(newRequest.getBitcoinsRequested());
                        userAccount.getWorkqueue().getWorkRequestList().add(customReq);
                        populateTable();
                        populateBuyTable();
                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }
                    }
                }
            } else {
                int selectedRow = buyerJTable.getSelectedRow();
                if (selectedRow < 0) {
                    JOptionPane.showMessageDialog(null, "Please select a row from seller table");
                } else {
                    WorkRequest newRequest = (WorkRequest) buyerJTable.getValueAt(selectedRow, 2);
                    if (wr.getBitcoinsRequested() == newRequest.getBitcoinsRequested()) {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(wr.getBitcoinsRequested());
                        minerWorkRequest.setStatus(wr.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());

                        UserAccount ua = (UserAccount) newRequest.getSender();
                        for (WorkRequest stateReq : ua.getWorkqueue().getWorkRequestList()) {
                            if (newRequest.getRequestedDate().equals(stateReq.getRequestedDate())) {
                                stateReq.setStatus("Processed");
                                newRequest.setStatus("Processed");
                                wr.setStatus("Processed");
                            }
                        }

                        userAccount.getWorkqueue().getWorkRequestList().add(wr);
                        userAccount.getWorkqueue().getWorkRequestList().add(newRequest);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(wr);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(newRequest);
                        populateTable();
                        populateSellTable();

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }
                    } else if (wr.getBitcoinsRequested() < newRequest.getBitcoinsRequested()) {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(wr.getBitcoinsRequested());
                        minerWorkRequest.setStatus(wr.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());
                        double requested = newRequest.getBitcoinsRequested();
                        newRequest.setBitcoinsRequested(newRequest.getBitcoinsRequested() - wr.getBitcoinsRequested());
                        wr.setStatus("Processed");
                        newRequest.setStatus(wr.getBitcoinsRequested() + " out of " + requested + " Bitcoins Processed");
                        userAccount.getWorkqueue().getWorkRequestList().add(wr);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(wr);
                        WorkRequest customReq = new WorkRequest();
                        customReq.setSender(newRequest.getSender());
                        customReq.setStatus("Processed");
                        customReq.setRequestedDate(newRequest.getRequestedDate());
                        customReq.setResovledDate(newRequest.getResovledDate());
                        customReq.setMessage(newRequest.getMessage());
                        customReq.setBitcoinsRequested(wr.getBitcoinsRequested());
                        userAccount.getWorkqueue().getWorkRequestList().add(customReq);
                        populateTable();
                        populateSellTable();

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }

                    } else {
                        minerWorkRequest.setRequestedDate(wr.getRequestedDate());
                        minerWorkRequest.setSender(newRequest.getSender());
                        minerWorkRequest.setBitcoinsRequested(newRequest.getBitcoinsRequested());
                        minerWorkRequest.setStatus(newRequest.getStatus());
                        minerWorkRequest.setBitcoinRewards(1);
                        minerWorkRequest.setReceiver(wr.getSender());
                        double requested = wr.getBitcoinsRequested();
                        wr.setBitcoinsRequested(wr.getBitcoinsRequested() - newRequest.getBitcoinsRequested());
                        newRequest.setStatus("Processed");
                        wr.setStatus(newRequest.getBitcoinsRequested() + " out of " + requested + " Bitcoins Processed");
                        userAccount.getWorkqueue().getWorkRequestList().add(newRequest);
                        custodianOrganization.getWorkqueue().getWorkRequestList().remove(newRequest);
                        WorkRequest customReq = new WorkRequest();
                        customReq.setSender(wr.getSender());
                        customReq.setStatus("Processed");
                        customReq.setRequestedDate(wr.getRequestedDate());
                        customReq.setResovledDate(wr.getResovledDate());
                        customReq.setMessage(wr.getMessage());
                        customReq.setBitcoinsRequested(newRequest.getBitcoinsRequested());
                        userAccount.getWorkqueue().getWorkRequestList().add(customReq);
                        populateTable();
                        populateSellTable();

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof MinerOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            //userAccount.getWorkqueue().getWorkRequestList().add(minerWorkRequest);
                            JOptionPane.showMessageDialog(null, "Request has been submitted");
                        }
                    }
                }
            }

//            Date date = (Date)requestTable.getValueAt(row, 1);
//            UserAccount investorAccount = (UserAccount) wr.getSender();
//            for(WorkRequest request : investorAccount.getWorkqueue().getWorkRequestList()){
//                if(date.equals(request.getRequestedDate())){
//                    request.setStatus("Processed");
//                }
//                populateTable();
//            }
        }

    }//GEN-LAST:event_submitButtonActionPerformed

    private void compReqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compReqBtnActionPerformed
        // TODO add your handling code here:
        CustodianCompletedRequestsJPanel custodianCompletedRequestsJPanel = new CustodianCompletedRequestsJPanel(userProcessContainer, userAccount, custodianOrganization, enterprise);
        userProcessContainer.add("custodianCompletedRequestsJPanel", custodianCompletedRequestsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_compReqBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buyJPanel;
    private javax.swing.JTable buyerJTable;
    private javax.swing.JButton compReqBtn;
    private javax.swing.JLabel headingJLAbel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton processButton;
    private javax.swing.JTable requestTable;
    private javax.swing.JPanel sellJPanel;
    private javax.swing.JTable sellerJTable;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
